import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

import Amplify, { API, Auth } from "aws-amplify";
import config from "../src/aws-exports";
import * as mutations from "../src/graphql/mutations";
import * as queries from "../src/graphql/queries";

import { useEffect, useState } from "react";

Amplify.configure(config);

export default function Home() {
  const [username, setUsername] = useState("");
  const [code, setCode] = useState("");
  const [artist, setArtist] = useState("");
  const [artistQuery, setArtistQuery] = useState("");
  const [allArtists, setAllArtists] = useState([]);
  const [searchResults, setSearchResults] = useState([]);

  useEffect(() => {
    fetchArtists();
  }, []);

  const signUp = async () => {
    try {
      const { user } = await Auth.signUp({
        username,
        password: "password",
        attributes: {
          email: `nicaroch+${Math.ceil(Math.random() * 1000)}@amazon.com`,
          phone_number: "+16024108498", // optional - E.164 number convention
        },
      });
      console.log({ user });
    } catch (error) {
      console.log("error signing up:", error);
    }
  };

  const signIn = async () => {
    try {
      const user = await Auth.signIn(username, "password");
      console.log({ user });
    } catch (error) {
      console.log("error signing in", error);
    }
  };

  const confirmSignUp = async () => {
    try {
      await Auth.confirmSignUp(username, code);
    } catch (error) {
      console.log("error confirming sign up", error);
    }
  };

  const fetchArtists = async () => {
    try {
      const allArtists = await API.graphql({ query: queries.listArtists });
      setAllArtists(allArtists.data.listArtists.items);
    } catch (err) {
      console.error("fetchArtists error:", err);
    }
  };

  const createArtist = async () => {
    try {
      const artistDetails = {
        name: artist,
      };
      const newArtist = await API.graphql({
        authMode: "AMAZON_COGNITO_USER_POOLS",
        query: mutations.createArtist,
        variables: { input: artistDetails },
      });
      console.log({ newArtist });
      fetchArtists();
    } catch (err) {
      console.error("createArtist err:", err);
    }
  };

  const findArtist = async (artistName) => {
    try {
      let filter = {
        name: {
          eq: artistName,
        },
      };

      const filteredResult = await API.graphql({
        authMode: "AMAZON_COGNITO_USER_POOLS",
        query: queries.listArtists,
        variables: {
          filter: filter,
        },
      });

      let { items } = filteredResult.data.listArtists;

      if (items.length) {
        console.log("yes");
        items = items.map((item) => item.name);
        setSearchResults(items);
      } else {
        setSearchResults([]);
      }

      const test = searchResults.includes(artist.name);
      console.log({ test, searchResults });
    } catch (err) {
      console.error("findArtist error: ", err);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>COOL ARTISTS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>ðŸ˜Ž COOL ARTISTS</h1>

        <ul>
          {allArtists.map((artist) => (
            <li
              className={
                searchResults.includes(artist.name) ? styles.filteredArtist : ""
              }
              key={artist.id}
            >
              {artist.name}
            </li>
          ))}
        </ul>

        <p className={styles.description}>
          Add a cool artist:
          <input
            type="text"
            name="artist"
            onChange={(e) => setArtist(e.target.value)}
          />
          <button onClick={createArtist}>Create Artist</button>
        </p>
        <p className={styles.description}>
          Find a cool artist:
          <input
            type="text"
            name="artistQuery"
            onChange={(e) => setArtistQuery(e.target.value)}
          />
          <button onClick={() => findArtist(artistQuery)}>Find &apos;em</button>
        </p>

        <p className={styles.description}>
          Sign up
          <input
            type="text"
            name="username"
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Username"
          />
          <button onClick={signUp}>Sign Up</button>
          Confirm sign up
          <input
            type="text"
            name="username"
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Username"
          />
          <input
            type="text"
            name="code"
            onChange={(e) => setCode(e.target.value)}
            placeholder="code"
          />
          <button onClick={confirmSignUp}>Confirm Sign Up</button>
          Sign in
          <input
            type="text"
            name="username"
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Username"
          />
          <button onClick={signIn}>Sign In</button>
        </p>
      </main>

      <footer className={styles.footer}>
        <a target="_blank" rel="noopener noreferrer">
          ðŸ˜Ž
        </a>
      </footer>
    </div>
  );
}
